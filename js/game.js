// Generated by CoffeeScript 1.6.3
var Game;

Game = (function() {
  var addFpsCounter, context, fpsFilter, lastUpdate, resetFpsCounter;

  window.fps = 0;

  lastUpdate = (new Date) * 1 - 1;

  fpsFilter = 50;

  context = null;

  addFpsCounter = function() {
    var fpsOut,
      _this = this;
    fpsOut = document.getElementById('fps');
    window.fps = 0;
    return setInterval(function() {
      return fpsOut.innerHTML = window.fps.toFixed(1);
    }, 500);
  };

  resetFpsCounter = function() {
    return window.fps = 0;
  };

  Game.prototype._getMousePos = function(event) {
    var rect;
    rect = this.canvas.getBoundingClientRect();
    return {
      x: event.clientX - rect.left,
      y: event.clientY - rect.top
    };
  };

  function Game() {
    var _this = this;
    this.canvas = document.querySelector("canvas#nnaive");
    window.canvas = this.canvas;
    $(".wrapper").height($(document).height() - 20);
    this.canvas.width = $('.wrapper').width();
    this.canvas.height = $('.wrapper').height();
    context = this.canvas.getContext("2d");
    this.board = new window.Board(this.canvas);
    console.log('board', this.board);
    $(this.canvas).bind('click', function(event) {
      var t;
      t = new Bot(_this._getMousePos(event));
      return _this.board.addBot(t);
    });
    $(this.canvas).bind('mousedown', function(event) {
      var t;
      if (event.button === 2) {
        t = new FixedPole(_this._getMousePos(event));
        return _this.board.addObject(t);
      }
    });
    window.canvasStop = false;
    $(document).keydown(function(event) {
      if (event.keyCode === 32) {
        console.log('spacebar');
        window.canvasStop = !window.canvasStop;
        return $("#flags").html(window.canvasStop ? "Stopped" : "");
      }
    });
    return;
    this.dispatcher = new EventDispatcher(this.board, this);
  }

  Game.prototype.loop = function() {
    var now, thisFrameFPS,
      _this = this;
    thisFrameFPS = 1000 / ((now = new Date) - lastUpdate);
    window.fps += (thisFrameFPS - window.fps) / 1;
    lastUpdate = now * 1 - 1;
    if (!window.canvasStop) {
      this.board.tic(1 / 50);
      this.board.render(context);
    }
    return window.setTimeout(function() {
      return _this.loop();
    }, 20);
  };

  Game.prototype.start = function() {
    addFpsCounter();
    console.log("Start looping board");
    return this.loop();
  };

  return Game;

})();

window.AnimateOnFrameRate = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };
})();

window.onload = function() {
  window.game = new Game;
  window.game.start();
};

$("body").keydown(function(e) {
  switch (e.keyCode || e.keyCode) {
    case 37:
      return window.leftPressed = true;
    case 38:
      return window.upPressed = true;
    case 39:
      return window.rightPressed = true;
    case 40:
      return window.downPressed = true;
  }
});

$("body").keyup(function(e) {
  switch (e.keyCode || e.keyCode) {
    case 37:
      return window.leftPressed = false;
    case 38:
      return window.upPressed = false;
    case 39:
      return window.rightPressed = false;
    case 40:
      return window.downPressed = false;
  }
});
