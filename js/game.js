// Generated by CoffeeScript 1.6.3
var Game;

Game = (function() {
  var addFpsCounter, context, fps, fpsFilter, lastRender, lastTic, resetFpsCounter, tps;

  fps = 0;

  tps = 0;

  lastTic = (new Date) * 1 - 1;

  lastRender = (new Date) * 1 - 1;

  fpsFilter = 50;

  context = null;

  addFpsCounter = function() {
    var fpsOut, stopeed, tics, tpsOut,
      _this = this;
    fpsOut = document.getElementById('fps');
    tpsOut = document.getElementById('tps');
    tics = document.getElementById('tics');
    stopeed = document.getElementById('stopped');
    return setInterval(function() {
      fpsOut.innerHTML = fps.toFixed(1);
      stopped.innerHTML = window.canvasStop ? "Stopped" : "";
      tpsOut.innerHTML = tps.toFixed(1);
      return tics.innerHTML = "" + game.board.tics + "/" + game.board.params.ticsPerGen;
    }, 100);
  };

  resetFpsCounter = function() {
    return fps = 0;
  };

  Game.prototype._getMousePos = function(event) {
    var rect;
    rect = this.canvas.getBoundingClientRect();
    return {
      x: event.clientX - rect.left,
      y: event.clientY - rect.top
    };
  };

  function Game() {
    var _this = this;
    this.canvas = document.querySelector("canvas#nnaive");
    window.canvas = this.canvas;
    $(".wrapper").height($(document).height() - 5);
    this.canvas.width = $('.wrapper').width();
    this.canvas.height = $('.wrapper').height();
    context = this.canvas.getContext("2d");
    window.context = context;
    this.panel = $("#panel");
    this.board = new window.Board();
    $(this.canvas).bind('click', function(event) {
      return _this.board.showSpecs(_this._getMousePos(event));
    });
    window.canvasStop = false;
    $(document).keydown(function(event) {
      if (event.keyCode === 32) {
        console.log('spacebar hit');
        window.canvasStop = !window.canvasStop;
        if (window.canvasStop) {
          return _this.panel.fadeIn();
        } else {
          return _this.panel.fadeOut();
        }
      }
    });
  }

  Game.prototype.loopTic = function() {
    var now, thisFrameTPS,
      _this = this;
    if (!window.canvasStop) {
      this.board.tic(1 / 50);
    }
    window.setTimeout((function() {
      return _this.loopTic();
    }), 1);
    thisFrameTPS = 1000 / ((now = new Date) - lastTic);
    tps += (thisFrameTPS - tps) / 30;
    return lastTic = now * 1 - 1;
  };

  Game.prototype.loopRender = function() {
    var now, thisFrameFPS,
      _this = this;
    this.board.render(context);
    window.AnimateOnFrameRate(function() {
      return _this.loopRender();
    });
    thisFrameFPS = 1000 / ((now = new Date) - lastRender);
    fps += (thisFrameFPS - fps) / 30;
    return lastRender = now * 1 - 1;
  };

  Game.prototype.start = function() {
    addFpsCounter();
    console.log("Start looping board", this.board, "with painter", this);
    this.loopTic();
    return this.loopRender();
  };

  return Game;

})();

window.AnimateOnFrameRate = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };
})();

window.onload = function() {
  window.game = new Game;
  window.game.start();
};

$("body").keydown(function(e) {
  switch (e.keyCode || e.keyCode) {
    case 37:
      return window.leftPressed = true;
    case 38:
      return window.upPressed = true;
    case 39:
      return window.rightPressed = true;
    case 40:
      return window.downPressed = true;
  }
});

$("body").keyup(function(e) {
  switch (e.keyCode || e.keyCode) {
    case 37:
      return window.leftPressed = false;
    case 38:
      return window.upPressed = false;
    case 39:
      return window.rightPressed = false;
    case 40:
      return window.downPressed = false;
  }
});
